.TH SMLFUT 1
.
.SH Name
smlfut - wrap Futhark program in Standard ML module.
.
.SH Synopsis
.SY smlfut
.RI [ manifest ]
.YS
.
.SH Description
Smlfut allows SML programs to invoke Futhark programs via Futhark's C
API.  To use it, first compile the Futhark program with
.MR futhark 1
using one of the C backends, then passing the generated JSON manifest
file to smlfut.  Given a manifest file
.IR foo.json ,
smlfut will produce two files
.I foo.sig
and
.IR foo.sml ,
containing a signature and structure definition respectively.  The
name of the structure will be taken from the file basename (in this
case
.IR foo ),
and the signature name will be the structure name in
uppercase
.RI ( FOO ).
Ensure that the basename is a valid SML identifier.
.
The generated files can be compiled with a Standard ML compiler,
although currently only
.MR mlton 1
(and perhaps MPL) is supported.  You must also link with the Futhark C
code, and if you use a GPU backend pass any necessary linker flags to
the Standard ML compiler.
.
The generated interface directly exposes the C API, so it is very low
level.  The only concession is that the C error codes are turned into
SML exceptions.
.
.SH Bugs
The generated code directly exposes the manual memory management
required by Futhark's C interface.  If you neglect to free the values
built using constructor functions or entry points, you will leak
memory.  Freeing the context before freeing all associated values will
also leak memory.
.
Be careful not to mix values associated with different contexts.  They
have the same type, so this is an easy mistake to make.
.
.SH License
Smlfut
itself is released under the GPLv3 or later.  The code
.I generated
by smlfut may be used for any purpose, without restrictions or
requirements, without any need for attribution.
